/*! tk-audials 2015-12-28 */
"use strict";

function TkAudial(a, b) {
  return this instanceof TkAudial ? (this.element = a, this.touchCount = 0, this.options = this.parseOptions(b), this.display = this.create("svg", "display"), this.options.inputId && (this.inputField = this.create("input", "", this.options.inputId)), this.border = this.create("circle", "border"), this.indicatorBackground = this.create("circle", "indicator-background"), this.indicator = this.create("path", "indicator"), this.valueBackground = this.create("circle", "value-background"), this.valueText = this.create("text", "value-text"), this.display.setAttributeNode(this.attribute("viewBox", "0 0 230 230")), this.border.setAttributeNode(this.attribute("cx", 115)), this.border.setAttributeNode(this.attribute("cy", 115)), this.border.setAttributeNode(this.attribute("r", 115)), this.border.setAttributeNode(this.attribute("fill", this.options.borderColour)), this.border.setAttributeNode(this.attribute("stroke-width", 0)), this.indicatorBackground.setAttributeNode(this.attribute("cx", 115)), this.indicatorBackground.setAttributeNode(this.attribute("cy", 115)), this.indicatorBackground.setAttributeNode(this.attribute("r", 115 - this.options.borderWidth)), this.indicatorBackground.setAttributeNode(this.attribute("fill", this.options.indicatorBackgroundColour)), this.indicatorBackground.setAttributeNode(this.attribute("stroke-width", 0)), this.indicator.setAttributeNode(this.attribute("fill", this.options.indicatorColour)), this.indicator.setAttributeNode(this.attribute("stroke", this.options.indicatorColour)), this.indicator.setAttributeNode(this.attribute("stroke-width", 0)), this.valueBackground.setAttributeNode(this.attribute("cx", 115)), this.valueBackground.setAttributeNode(this.attribute("cy", 115)), this.valueBackground.setAttributeNode(this.attribute("r", 115 - this.options.borderWidth - this.options.indicatorWidth)), this.valueBackground.setAttributeNode(this.attribute("fill", this.options.valueBackgroundColour)), this.valueText.setAttributeNode(this.attribute("x", "50%")), this.valueText.setAttributeNode(this.attribute("y", "50%")), this.valueText.setAttributeNode(this.attribute("dy", ".33em")), this.valueText.setAttributeNode(this.attribute("fill", this.options.valueColour)), this.valueText.setAttributeNode(this.attribute("font-size", this.options.valueFontSize)), this.valueText.textContent = this.value, this.inputField && this.display.appendChild(this.inputField), this.options.borderWidth > 0 && this.display.appendChild(this.border), this.display.appendChild(this.indicatorBackground), this.display.appendChild(this.indicator), this.display.appendChild(this.valueBackground), this.display.appendChild(this.valueText), a.appendChild(this.display), void (null !== this.element && this.init())) : new TkAudial(a, b);
}TkAudial.prototype.init = function () {
  self.addEventListener("touchstart", this.touchHandler.bind(this), !0), self.addEventListener("touchmove", this.touchHandler.bind(this), !0), self.addEventListener("touchend", this.touchHandler.bind(this), !0), self.addEventListener("touchcancel", this.touchHandler.bind(this), !0), this.element.addEventListener("mousedown", this.onmousedown.bind(this), !0), self.addEventListener("mousemove", this.onmousemove.bind(this), !0), self.addEventListener("mouseup", this.onmouseup.bind(this), !0), self.addEventListener("keyup", this.onsensitivitymodifier.bind(this), !0), self.addEventListener("keydown", this.onsensitivitymodifier.bind(this), !0), this.setValue(this.options.value);
}, TkAudial.prototype.parseOptions = function (a) {
  var b = a || { type: "gain", display: "notch", min: 0, max: 100, step: 1, value: 50, borderColour: "black", borderWidth: 8, indicatorBackgroundColour: "#545454", indicatorColour: "white", indicatorWidth: 15, valueBackgroundColour: "black", valueBackgroundRadius: 87, valueColour: "white", valueFontSize: "1em", inputId: null };return a ? (b.type = a.type || "gain", b.display = a.display || "notch", b.min = null == a.min ? 0 : a.min, b.max = null == a.max ? 100 : a.max, b.step = null == a.step ? 1 : a.step, b.value = null == a.value ? 50 : a.value, b.borderColour = a.borderColour || "black", b.borderWidth = null == a.borderWidth ? 8 : a.borderWidth, b.indicatorBackgroundColour = a.indicatorBackgroundColour || "#545454", b.indicatorColour = a.indicatorColour || "white", b.indicatorWidth = null == a.indicatorWidth ? 15 : a.indicatorWidth, b.valueBackgroundColour = a.valueBackgroundColour || "black", b.valueBackgroundRadius = null == a.valueBackgroundRadius ? 87 : a.valueBackgroundRadius, b.valueColour = a.valueColour || "white", b.valueFontSize = a.valueFontSize || "1em", b.inputId = a.inputId, b) : b;
}, TkAudial.prototype.slide = function (a) {
  this.slideValue = a < this.options.min ? this.options.min : a > this.options.max ? this.options.max : a, this.valueText.textContent = this.slideValue, this.drawIndicator(this.slideValue), this.element.dispatchEvent(new CustomEvent("changed", { detail: this.slideValue }));
}, TkAudial.prototype.commitSlide = function (a) {
  this.value = this.slideValue, this.inputField && this.inputField.setAttributeNode(this.attribute("value", this.slideValue));
}, TkAudial.prototype.setValue = function (a) {
  isNaN(a) || (a = this.round(a), this.slide(a), this.commitSlide());
}, TkAudial.prototype.drawIndicator = function (a) {
  "notch" == this.options.display ? this.notch(a) : "gain" == this.options.type ? this.gainFill(a) : this.balanceFill(a);
}, TkAudial.prototype.notch = function (a) {
  var b = "M115,115 ",
      c = this.translate(a),
      d = 115 - this.options.borderWidth,
      e = 115 + d * Math.sin(c * Math.PI / 180),
      f = 115 - d * Math.cos(c * Math.PI / 180);b += "L" + e + "," + f, this.indicator.setAttributeNode(this.attribute("d", b)), this.indicator.setAttributeNode(this.attribute("stroke-width", 8));
}, TkAudial.prototype.gainFill = function (a) {
  var b = this.translate(a),
      c = 115 - this.options.borderWidth,
      d = 115 + c * Math.sin(225 * Math.PI / 180),
      e = 115 - c * Math.cos(225 * Math.PI / 180),
      f = 115 + c * Math.sin(b * Math.PI / 180),
      g = 115 - c * Math.cos(b * Math.PI / 180),
      h = "M115,115 L" + d + "," + e + " ";b > 180 ? h += "A " + c + "," + c + " 1 0 1 " + f + "," + g + " z" : (h += "A " + c + "," + c + " 1 0 1 115," + this.options.borderWidth + " ", h += "L 115," + this.options.borderWidth + " A " + c + "," + c + " 1 0 1 " + f + "," + g + " z"), this.indicator.setAttributeNode(this.attribute("d", h)), this.indicator.setAttributeNode(this.attribute("stroke-width", 225 == b ? 3 : 0));
}, TkAudial.prototype.balanceFill = function (a) {
  var b = this.translate(a),
      c = 115 - this.options.borderWidth,
      d = 115 + c * Math.sin(b * Math.PI / 180),
      e = 115 - c * Math.cos(b * Math.PI / 180),
      f = "M115,115 L115," + this.options.borderWidth + " A " + c + "," + c + " 1 0 1 " + d + "," + e + " z";b > 180 ? f = "M115,115 L" + d + "," + e + " A " + c + "," + c + " 1 0 1 115," + this.options.borderWidth + " z" : 0 == b && (f = "M115,115 L" + d + "," + e + " A " + c + "," + c + " 1 0 1 115," + this.options.borderWidth + " z"), this.indicator.setAttributeNode(this.attribute("d", f)), this.indicator.setAttributeNode(this.attribute("stroke-width", 0 == b ? 3 : 0));
}, TkAudial.prototype.translate = function (a) {
  var b = 270 * (a - this.options.min) / (this.options.max - this.options.min) + -135;return (0 > b && (b = 360 + b), b);
}, TkAudial.prototype.round = function (a) {
  var b = this.decimalPlaces(this.options.step);switch (b) {case 0:
      return Math.round(a);case 1:
      return Math.round(10 * a) / 10;default:
      return Math.round(100 * a) / 100;}
}, TkAudial.prototype.decimalPlaces = (function () {
  function a(a) {
    return "number" == typeof a && parseFloat(a) == parseInt(a, 10) && !isNaN(a);
  }return function (b) {
    for (var c = Math.abs(b), d = c, e = 1; !a(d) && isFinite(d);) d = c * Math.pow(10, e++);return e - 1;
  };
})(), TkAudial.prototype.touchHandler = function (a) {
  if (("touchstart" == a.type ? (this.touchCount += a.changedTouches.length, this.active && (this.commitSlide(), this.startY = this.clientY)) : "touchend" == a.type && (this.touchCount -= a.changedTouches.length, this.active && (this.commitSlide(), this.startY = this.clientY)), console.log("Touch count:" + this.touchCount), a.target.getAttribute("class") && -1 != a.target.getAttribute("class").indexOf("tk-audial"))) {
    var b = a.changedTouches,
        c = b[0],
        d = "";switch (a.type) {case "touchstart":
        d = "mousedown";break;case "touchmove":
        d = "mousemove";break;case "touchend":
        d = "mouseup";break;default:
        return;}var e = document.createEvent("MouseEvent");e.initMouseEvent(d, !0, !0, window, 1, c.screenX, c.screenY, c.clientX, c.clientY, !1, !1, !1, !1, 0, null), c.target.dispatchEvent(e), a.preventDefault();
  }
}, TkAudial.prototype.getValue = function (a) {
  return a ? void this.setValue(a) : this.value;
}, TkAudial.prototype.create = function (a, b, c) {
  var d = "http://www.w3.org/2000/svg",
      e = "input" == a ? document.createElement("input") : document.createElementNS(d, a);return (e.setAttributeNode(this.attribute("class", b)), "input" == a && (e.setAttributeNode(this.attribute("id", c)), e.setAttributeNode(this.attribute("name", c)), e.setAttributeNode(this.attribute("type", "hidden"))), e);
}, TkAudial.prototype.attribute = function (a, b) {
  var c = document.createAttribute(a);return (c.value = b, c);
}, TkAudial.prototype.hide = function () {
  this.element.style.display = "none";
}, TkAudial.prototype.selectable = function (a) {
  var b = document.querySelector("*");a === !0 ? b.classList.remove("unselectable") : this.valueText.classList.contains("unselectable") || b.classList.add("unselectable");
}, TkAudial.prototype.onmousedown = function (a) {
  a.touches && (a = a.touches[0]), this.startY = a.clientY, this.selectable(!1), this.active = !0;
}, TkAudial.prototype.onmousemove = function (a) {
  if (this.startY) {
    this.clientY = a.clientY, a.preventDefault(), a.touches && (a = a.touches[0]);var b = (a.clientY - this.startY) * (a.altKey ? 2 : 1) * (a.shiftKey ? 3 : 1);this.touchCount > 1 && (b = (a.clientY - this.startY) * this.touchCount + 1);var c = this.value + b * this.options.step * -1,
        d = this.round(c);return void this.slide(d);
  }
}, TkAudial.prototype.onmouseup = function (a) {
  this.commitSlide(), this.startY = null, this.selectable(!0), this.active = !1;
}, TkAudial.prototype.onsensitivitymodifier = function (a) {
  !this.active || 16 != a.keyCode && 18 != a.keyCode || (this.commitSlide(), this.startY = this.clientY);
};
//# sourceMappingURL=tk-audials.min.js.map
